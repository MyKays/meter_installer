#!/bin/bash
action=$1
target=$2
args=$@

MS_BASE=/opt
COMPOSE_FILES=$(cat ${MS_BASE}/metersphere/compose_files)
export COMPOSE_HTTP_TIMEOUT=180

function usage() {
   echo "MeterSphere 控制脚本"
   echo
   echo "Usage: "
   echo "  ./msctl.sh [COMMAND] [ARGS...]"
   echo "  ./msctl.sh --help"
   echo
   echo "Commands: "
   echo "  status    查看 MeterSphere 服务运行状态"
   echo "  start     启动 MeterSphere 服务"
   echo "  stop      停止 MeterSphere 服务"
   echo "  restart   重启 MeterSphere 服务"
   echo "  reload    重新加载 MeterSphere 服务"
   echo "  upgrade   升级 MeterSphere 至最新版本"
   echo "  upgrade [RELEASE]  根据版本号搜索离线包，升级 MeterSphere 至对应版本"
   echo "  uninstall 卸载 MeterSphere 服务"
   echo "  version   查看 MeterSphere 版本信息"
}

function status() {
   echo
   cd ${MS_BASE}/metersphere
   docker-compose ${COMPOSE_FILES} ps
}
function start() {
   echo
   cd ${MS_BASE}/metersphere
   docker-compose ${COMPOSE_FILES} start ${target}
}
function stop() {
   echo
   cd ${MS_BASE}/metersphere
   docker-compose ${COMPOSE_FILES} stop ${target}
}
function restart() {
   echo
   cd ${MS_BASE}/metersphere
   docker-compose ${COMPOSE_FILES} restart ${target}
}
function reload() {
   echo
   cd ${MS_BASE}/metersphere
   docker-compose ${COMPOSE_FILES} up -d
}
function uninstall() {
   echo
   cd ${MS_BASE}/metersphere
   docker-compose ${COMPOSE_FILES} down ${target}
}
function version() {
   echo
   cat ${MS_BASE}/metersphere/version
}
function upgrade() {
   if [ -z "$target" ]; then
      os=$(uname -a)
      if [[ $os =~ 'Darwin' ]]; then
         MSVERSION=$(curl -m 10 -s https://github.com/metersphere/metersphere/releases/latest | grep -Eo 'v[0-9]+.[0-9]+.[0-9]+')
      else
         MSVERSION=$(curl -m 10 -s https://github.com/metersphere/metersphere/releases/latest/download 2>&1 | grep -Po 'v[0-9]+\.[0-9]+\.[0-9]+.*(?=")')
      fi
      if [ $? -ne 0 ]; then
         echo -e "\e[31m获取最新版本信息失败:连接github超时！\e[0m"
         return 2
      fi
      echo -e "\e[32m 检测到github最新版本为v\e[1;33m${MSVERSION}\e[0;32m 即将执行在线升级...\e[0m"
      sleep 5s
      wget -nv -T 60 -t 1 --no-check-certificate https://github.com/metersphere/metersphere/releases/latest/download/metersphere-release-${MSVERSION}.tar.gz -O /tmp/metersphere-release-${MSVERSION}.tar.gz
      if [ $? -ne 0 ]; then
         echo -e "\e[31m升级失败:连接github超时！\n可手动下载升级包，然后执行\e[1;33m msctl upgrade ${MSVERSION} \e[0;31m离线升级\e[0m"
         return 2
      fi

   else
      MSVERSION=${target}
      echo -e "\e[32m通过离线包升级到\e[1;33m${MSVERSION}\e[0m"
   fi

   if [ ! -f "/tmp/metersphere-release-${MSVERSION}.tar.gz" ]; then
      echo -e "\e[31m未找到离线升级包\e[1;33m/tmp/metersphere-release-${MSVERSION}.tar.gz\e[31m，请检查！\e[0m"
      echo -e "参考下载地址：\e[4;7mwget -T60 -t1 --no-check-certificate https://github.com/metersphere/metersphere/releases/download/${MSVERSION}/metersphere-release-${MSVERSION}.tar.gz -O /tmp/metersphere-release-${MSVERSION}.tar.gz\e[0m"
      return 2
   fi

   cd /tmp
   tar zxvf metersphere-release-${MSVERSION}.tar.gz
   cd metersphere-release-${MSVERSION}
   cat ${MS_BASE}/metersphere/.env >>install.conf
   sed -i -e "s#MS_IMAGE_TAG=.*#MS_IMAGE_TAG=${MSVERSION}#g" install.conf
   sed -i -e "s#MS_IMAGE_PREFIX=.*#MS_IMAGE_PREFIX=registry.cn-qingdao.aliyuncs.com\/metersphere#g" install.conf
   /bin/bash install.sh
   rm -rf /tmp/metersphere-release-${MSVERSION}
}

function main() {
   case "${action}" in
   status)
      status
      ;;
   start)
      start
      ;;
   stop)
      stop
      ;;
   restart)
      restart
      ;;
   reload)
      reload
      ;;
   upgrade)
      upgrade
      ;;
   uninstall)
      uninstall
      ;;
   version)
      version
      ;;
   help)
      usage
      ;;
   --help)
      usage
      ;;
   *)
      echo "不支持的参数，请使用 help 或 --help 参数获取帮助"
      ;;
   esac
}
main
